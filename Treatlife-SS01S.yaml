substitutions:
  device_name: <<Device Name>>
  device_description: <<Device Description>>
  friendly_name: <<Device friendly Name>>

esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret wifi_domain
  fast_connect: on #we only have one WiFi AP so just use the first one that matches
  ap: #since we listed an SSID above, this AP mode will only enable if no WiFi connection could be made
    ssid: !secret ap_ssid
    password: !secret ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

# Enable OTA updates
ota:

# Enable web server
web_server:
  port: 80

binary_sensor:
# Toggle button
  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: true
    name: ${friendly_name} Button
    on_press:
       - light.toggle: fixture

# Reports if this device is Connected or not
  - platform: status
    name: ${friendly_name} Status

# Status LED for red light.
status_led:
  pin:
    number: GPIO5
    inverted: true
    
sensor:
# Reports the WiFi signal strength
  - platform: wifi_signal
    name: ${friendly_name} Signal
    update_interval: 60s

# Reports how long the device has been powered (in hours)
  - platform: uptime
    name: ${friendly_name} Uptime
    filters:
      - lambda: return x / 3600.0;
    unit_of_measurement: hours

text_sensor:
# Reports the ESPHome Version with compile date
  - platform: version
    name: ${friendly_name} Version

switch:
  #Switch to restart device
  - platform: restart
    name: ${friendly_name} Restart
    
light:
  - platform: binary
    name: ${friendly_name} Switch
    id: fixture
    output: light_relay
    
output:
  # Power to Fixture light
  - platform: gpio
    pin: GPIO12
    id: light_relay
    power_supply: led

power_supply:
  # LED light (blue)
  - pin: GPIO04
    id: led
    enable_time: 0s
    keep_on_time: 0s
